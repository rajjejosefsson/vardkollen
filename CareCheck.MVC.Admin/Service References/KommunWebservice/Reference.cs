//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CareCheck.MVC.Admin.KommunWebservice {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KommunWebservice.IKommunWebservice")]
    public interface IKommunWebservice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/EmployeeList", ReplyAction="http://tempuri.org/IKommunWebservice/EmployeeListResponse")]
        CareCheck.DomainClasses.Employee[] EmployeeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/EmployeeList", ReplyAction="http://tempuri.org/IKommunWebservice/EmployeeListResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Employee[]> EmployeeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/EmployeeById", ReplyAction="http://tempuri.org/IKommunWebservice/EmployeeByIdResponse")]
        CareCheck.DomainClasses.Employee EmployeeById(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/EmployeeById", ReplyAction="http://tempuri.org/IKommunWebservice/EmployeeByIdResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Employee> EmployeeByIdAsync(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateEmployee", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateEmployeeResponse")]
        void InsertOrUpdateEmployee(CareCheck.DomainClasses.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateEmployee", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateEmployeeResponse")]
        System.Threading.Tasks.Task InsertOrUpdateEmployeeAsync(CareCheck.DomainClasses.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeletEmployeeById", ReplyAction="http://tempuri.org/IKommunWebservice/DeletEmployeeByIdResponse")]
        void DeletEmployeeById(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeletEmployeeById", ReplyAction="http://tempuri.org/IKommunWebservice/DeletEmployeeByIdResponse")]
        System.Threading.Tasks.Task DeletEmployeeByIdAsync(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientList", ReplyAction="http://tempuri.org/IKommunWebservice/PatientListResponse")]
        CareCheck.DomainClasses.Patient[] PatientList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientList", ReplyAction="http://tempuri.org/IKommunWebservice/PatientListResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Patient[]> PatientListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientById", ReplyAction="http://tempuri.org/IKommunWebservice/PatientByIdResponse")]
        CareCheck.DomainClasses.Patient PatientById(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientById", ReplyAction="http://tempuri.org/IKommunWebservice/PatientByIdResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Patient> PatientByIdAsync(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdatePatient", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdatePatientResponse")]
        void InsertOrUpdatePatient(CareCheck.DomainClasses.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdatePatient", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdatePatientResponse")]
        System.Threading.Tasks.Task InsertOrUpdatePatientAsync(CareCheck.DomainClasses.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeletePatientById", ReplyAction="http://tempuri.org/IKommunWebservice/DeletePatientByIdResponse")]
        void DeletePatientById(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeletePatientById", ReplyAction="http://tempuri.org/IKommunWebservice/DeletePatientByIdResponse")]
        System.Threading.Tasks.Task DeletePatientByIdAsync(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/RelativeList", ReplyAction="http://tempuri.org/IKommunWebservice/RelativeListResponse")]
        CareCheck.DomainClasses.Relative[] RelativeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/RelativeList", ReplyAction="http://tempuri.org/IKommunWebservice/RelativeListResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Relative[]> RelativeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/RelativeById", ReplyAction="http://tempuri.org/IKommunWebservice/RelativeByIdResponse")]
        CareCheck.DomainClasses.Relative RelativeById(int relativeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/RelativeById", ReplyAction="http://tempuri.org/IKommunWebservice/RelativeByIdResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Relative> RelativeByIdAsync(int relativeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateRelative", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateRelativeResponse")]
        void InsertOrUpdateRelative(CareCheck.DomainClasses.Relative relative);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateRelative", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateRelativeResponse")]
        System.Threading.Tasks.Task InsertOrUpdateRelativeAsync(CareCheck.DomainClasses.Relative relative);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteRelativeById", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteRelativeByIdResponse")]
        void DeleteRelativeById(int relativeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteRelativeById", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteRelativeByIdResponse")]
        System.Threading.Tasks.Task DeleteRelativeByIdAsync(int relativeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/ConnectRelativeAndPatient", ReplyAction="http://tempuri.org/IKommunWebservice/ConnectRelativeAndPatientResponse")]
        void ConnectRelativeAndPatient(int patientId, int relativeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/ConnectRelativeAndPatient", ReplyAction="http://tempuri.org/IKommunWebservice/ConnectRelativeAndPatientResponse")]
        System.Threading.Tasks.Task ConnectRelativeAndPatientAsync(int patientId, int relativeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/TaskList", ReplyAction="http://tempuri.org/IKommunWebservice/TaskListResponse")]
        CareCheck.DomainClasses.Task[] TaskList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/TaskList", ReplyAction="http://tempuri.org/IKommunWebservice/TaskListResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Task[]> TaskListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/TaskById", ReplyAction="http://tempuri.org/IKommunWebservice/TaskByIdResponse")]
        CareCheck.DomainClasses.Task TaskById(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/TaskById", ReplyAction="http://tempuri.org/IKommunWebservice/TaskByIdResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Task> TaskByIdAsync(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateTask", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateTaskResponse")]
        void InsertOrUpdateTask(CareCheck.DomainClasses.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateTask", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateTaskResponse")]
        System.Threading.Tasks.Task InsertOrUpdateTaskAsync(CareCheck.DomainClasses.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteTaskById", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteTaskByIdResponse")]
        void DeleteTaskById(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteTaskById", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteTaskByIdResponse")]
        System.Threading.Tasks.Task DeleteTaskByIdAsync(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateSchedule", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateScheduleResponse")]
        CareCheck.DomainClasses.Schedule InsertOrUpdateSchedule(CareCheck.DomainClasses.Schedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateSchedule", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateScheduleResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> InsertOrUpdateScheduleAsync(CareCheck.DomainClasses.Schedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientScheduleById", ReplyAction="http://tempuri.org/IKommunWebservice/PatientScheduleByIdResponse")]
        CareCheck.DomainClasses.Schedule PatientScheduleById(int scheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientScheduleById", ReplyAction="http://tempuri.org/IKommunWebservice/PatientScheduleByIdResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> PatientScheduleByIdAsync(int scheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/ScheduleById", ReplyAction="http://tempuri.org/IKommunWebservice/ScheduleByIdResponse")]
        CareCheck.DomainClasses.Schedule ScheduleById(int sheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/ScheduleById", ReplyAction="http://tempuri.org/IKommunWebservice/ScheduleByIdResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> ScheduleByIdAsync(int sheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteScheduleById", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteScheduleByIdResponse")]
        void DeleteScheduleById(int sheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteScheduleById", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteScheduleByIdResponse")]
        System.Threading.Tasks.Task DeleteScheduleByIdAsync(int sheduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientsSchedules", ReplyAction="http://tempuri.org/IKommunWebservice/PatientsSchedulesResponse")]
        CareCheck.DomainClasses.Schedule[] PatientsSchedules();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientsSchedules", ReplyAction="http://tempuri.org/IKommunWebservice/PatientsSchedulesResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule[]> PatientsSchedulesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/EmployeeSchedulesById", ReplyAction="http://tempuri.org/IKommunWebservice/EmployeeSchedulesByIdResponse")]
        CareCheck.DomainClasses.Schedule[] EmployeeSchedulesById(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/EmployeeSchedulesById", ReplyAction="http://tempuri.org/IKommunWebservice/EmployeeSchedulesByIdResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule[]> EmployeeSchedulesByIdAsync(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertTodo", ReplyAction="http://tempuri.org/IKommunWebservice/InsertTodoResponse")]
        void InsertTodo(CareCheck.DomainClasses.TodoList todoItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertTodo", ReplyAction="http://tempuri.org/IKommunWebservice/InsertTodoResponse")]
        System.Threading.Tasks.Task InsertTodoAsync(CareCheck.DomainClasses.TodoList todoItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/Todos", ReplyAction="http://tempuri.org/IKommunWebservice/TodosResponse")]
        CareCheck.DomainClasses.TodoList[] Todos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/Todos", ReplyAction="http://tempuri.org/IKommunWebservice/TodosResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.TodoList[]> TodosAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKommunWebserviceChannel : CareCheck.MVC.Admin.KommunWebservice.IKommunWebservice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KommunWebserviceClient : System.ServiceModel.ClientBase<CareCheck.MVC.Admin.KommunWebservice.IKommunWebservice>, CareCheck.MVC.Admin.KommunWebservice.IKommunWebservice {
        
        public KommunWebserviceClient() {
        }
        
        public KommunWebserviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KommunWebserviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KommunWebserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KommunWebserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CareCheck.DomainClasses.Employee[] EmployeeList() {
            return base.Channel.EmployeeList();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Employee[]> EmployeeListAsync() {
            return base.Channel.EmployeeListAsync();
        }
        
        public CareCheck.DomainClasses.Employee EmployeeById(int employeeId) {
            return base.Channel.EmployeeById(employeeId);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Employee> EmployeeByIdAsync(int employeeId) {
            return base.Channel.EmployeeByIdAsync(employeeId);
        }
        
        public void InsertOrUpdateEmployee(CareCheck.DomainClasses.Employee employee) {
            base.Channel.InsertOrUpdateEmployee(employee);
        }
        
        public System.Threading.Tasks.Task InsertOrUpdateEmployeeAsync(CareCheck.DomainClasses.Employee employee) {
            return base.Channel.InsertOrUpdateEmployeeAsync(employee);
        }
        
        public void DeletEmployeeById(int employeeId) {
            base.Channel.DeletEmployeeById(employeeId);
        }
        
        public System.Threading.Tasks.Task DeletEmployeeByIdAsync(int employeeId) {
            return base.Channel.DeletEmployeeByIdAsync(employeeId);
        }
        
        public CareCheck.DomainClasses.Patient[] PatientList() {
            return base.Channel.PatientList();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Patient[]> PatientListAsync() {
            return base.Channel.PatientListAsync();
        }
        
        public CareCheck.DomainClasses.Patient PatientById(int patientId) {
            return base.Channel.PatientById(patientId);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Patient> PatientByIdAsync(int patientId) {
            return base.Channel.PatientByIdAsync(patientId);
        }
        
        public void InsertOrUpdatePatient(CareCheck.DomainClasses.Patient patient) {
            base.Channel.InsertOrUpdatePatient(patient);
        }
        
        public System.Threading.Tasks.Task InsertOrUpdatePatientAsync(CareCheck.DomainClasses.Patient patient) {
            return base.Channel.InsertOrUpdatePatientAsync(patient);
        }
        
        public void DeletePatientById(int patientId) {
            base.Channel.DeletePatientById(patientId);
        }
        
        public System.Threading.Tasks.Task DeletePatientByIdAsync(int patientId) {
            return base.Channel.DeletePatientByIdAsync(patientId);
        }
        
        public CareCheck.DomainClasses.Relative[] RelativeList() {
            return base.Channel.RelativeList();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Relative[]> RelativeListAsync() {
            return base.Channel.RelativeListAsync();
        }
        
        public CareCheck.DomainClasses.Relative RelativeById(int relativeId) {
            return base.Channel.RelativeById(relativeId);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Relative> RelativeByIdAsync(int relativeId) {
            return base.Channel.RelativeByIdAsync(relativeId);
        }
        
        public void InsertOrUpdateRelative(CareCheck.DomainClasses.Relative relative) {
            base.Channel.InsertOrUpdateRelative(relative);
        }
        
        public System.Threading.Tasks.Task InsertOrUpdateRelativeAsync(CareCheck.DomainClasses.Relative relative) {
            return base.Channel.InsertOrUpdateRelativeAsync(relative);
        }
        
        public void DeleteRelativeById(int relativeId) {
            base.Channel.DeleteRelativeById(relativeId);
        }
        
        public System.Threading.Tasks.Task DeleteRelativeByIdAsync(int relativeId) {
            return base.Channel.DeleteRelativeByIdAsync(relativeId);
        }
        
        public void ConnectRelativeAndPatient(int patientId, int relativeId) {
            base.Channel.ConnectRelativeAndPatient(patientId, relativeId);
        }
        
        public System.Threading.Tasks.Task ConnectRelativeAndPatientAsync(int patientId, int relativeId) {
            return base.Channel.ConnectRelativeAndPatientAsync(patientId, relativeId);
        }
        
        public CareCheck.DomainClasses.Task[] TaskList() {
            return base.Channel.TaskList();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Task[]> TaskListAsync() {
            return base.Channel.TaskListAsync();
        }
        
        public CareCheck.DomainClasses.Task TaskById(int taskId) {
            return base.Channel.TaskById(taskId);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Task> TaskByIdAsync(int taskId) {
            return base.Channel.TaskByIdAsync(taskId);
        }
        
        public void InsertOrUpdateTask(CareCheck.DomainClasses.Task task) {
            base.Channel.InsertOrUpdateTask(task);
        }
        
        public System.Threading.Tasks.Task InsertOrUpdateTaskAsync(CareCheck.DomainClasses.Task task) {
            return base.Channel.InsertOrUpdateTaskAsync(task);
        }
        
        public void DeleteTaskById(int taskId) {
            base.Channel.DeleteTaskById(taskId);
        }
        
        public System.Threading.Tasks.Task DeleteTaskByIdAsync(int taskId) {
            return base.Channel.DeleteTaskByIdAsync(taskId);
        }
        
        public CareCheck.DomainClasses.Schedule InsertOrUpdateSchedule(CareCheck.DomainClasses.Schedule schedule) {
            return base.Channel.InsertOrUpdateSchedule(schedule);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> InsertOrUpdateScheduleAsync(CareCheck.DomainClasses.Schedule schedule) {
            return base.Channel.InsertOrUpdateScheduleAsync(schedule);
        }
        
        public CareCheck.DomainClasses.Schedule PatientScheduleById(int scheduleId) {
            return base.Channel.PatientScheduleById(scheduleId);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> PatientScheduleByIdAsync(int scheduleId) {
            return base.Channel.PatientScheduleByIdAsync(scheduleId);
        }
        
        public CareCheck.DomainClasses.Schedule ScheduleById(int sheduleId) {
            return base.Channel.ScheduleById(sheduleId);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> ScheduleByIdAsync(int sheduleId) {
            return base.Channel.ScheduleByIdAsync(sheduleId);
        }
        
        public void DeleteScheduleById(int sheduleId) {
            base.Channel.DeleteScheduleById(sheduleId);
        }
        
        public System.Threading.Tasks.Task DeleteScheduleByIdAsync(int sheduleId) {
            return base.Channel.DeleteScheduleByIdAsync(sheduleId);
        }
        
        public CareCheck.DomainClasses.Schedule[] PatientsSchedules() {
            return base.Channel.PatientsSchedules();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule[]> PatientsSchedulesAsync() {
            return base.Channel.PatientsSchedulesAsync();
        }
        
        public CareCheck.DomainClasses.Schedule[] EmployeeSchedulesById(int employeeId) {
            return base.Channel.EmployeeSchedulesById(employeeId);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule[]> EmployeeSchedulesByIdAsync(int employeeId) {
            return base.Channel.EmployeeSchedulesByIdAsync(employeeId);
        }
        
        public void InsertTodo(CareCheck.DomainClasses.TodoList todoItem) {
            base.Channel.InsertTodo(todoItem);
        }
        
        public System.Threading.Tasks.Task InsertTodoAsync(CareCheck.DomainClasses.TodoList todoItem) {
            return base.Channel.InsertTodoAsync(todoItem);
        }
        
        public CareCheck.DomainClasses.TodoList[] Todos() {
            return base.Channel.Todos();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.TodoList[]> TodosAsync() {
            return base.Channel.TodosAsync();
        }
    }
}
