//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace vardkollen.KommunWebservice {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KommunWebservice.IKommunWebservice")]
    public interface IKommunWebservice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/EmployeeList", ReplyAction="http://tempuri.org/IKommunWebservice/EmployeeListResponse")]
        CareCheck.DomainClasses.Employee[] EmployeeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/EmployeeList", ReplyAction="http://tempuri.org/IKommunWebservice/EmployeeListResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Employee[]> EmployeeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/GetEmployee", ReplyAction="http://tempuri.org/IKommunWebservice/GetEmployeeResponse")]
        CareCheck.DomainClasses.Employee GetEmployee(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/GetEmployee", ReplyAction="http://tempuri.org/IKommunWebservice/GetEmployeeResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Employee> GetEmployeeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateEmployee", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateEmployeeResponse")]
        void InsertOrUpdateEmployee(CareCheck.DomainClasses.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateEmployee", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateEmployeeResponse")]
        System.Threading.Tasks.Task InsertOrUpdateEmployeeAsync(CareCheck.DomainClasses.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeletEmployee", ReplyAction="http://tempuri.org/IKommunWebservice/DeletEmployeeResponse")]
        void DeletEmployee(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeletEmployee", ReplyAction="http://tempuri.org/IKommunWebservice/DeletEmployeeResponse")]
        System.Threading.Tasks.Task DeletEmployeeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientList", ReplyAction="http://tempuri.org/IKommunWebservice/PatientListResponse")]
        CareCheck.DomainClasses.Patient[] PatientList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientList", ReplyAction="http://tempuri.org/IKommunWebservice/PatientListResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Patient[]> PatientListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/GetPatient", ReplyAction="http://tempuri.org/IKommunWebservice/GetPatientResponse")]
        CareCheck.DomainClasses.Patient GetPatient(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/GetPatient", ReplyAction="http://tempuri.org/IKommunWebservice/GetPatientResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Patient> GetPatientAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdatePatient", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdatePatientResponse")]
        void InsertOrUpdatePatient(CareCheck.DomainClasses.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdatePatient", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdatePatientResponse")]
        System.Threading.Tasks.Task InsertOrUpdatePatientAsync(CareCheck.DomainClasses.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeletePatient", ReplyAction="http://tempuri.org/IKommunWebservice/DeletePatientResponse")]
        void DeletePatient(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeletePatient", ReplyAction="http://tempuri.org/IKommunWebservice/DeletePatientResponse")]
        System.Threading.Tasks.Task DeletePatientAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientScheduleById", ReplyAction="http://tempuri.org/IKommunWebservice/PatientScheduleByIdResponse")]
        CareCheck.DomainClasses.Schedule PatientScheduleById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientScheduleById", ReplyAction="http://tempuri.org/IKommunWebservice/PatientScheduleByIdResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> PatientScheduleByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/RelativeList", ReplyAction="http://tempuri.org/IKommunWebservice/RelativeListResponse")]
        CareCheck.DomainClasses.Relative[] RelativeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/RelativeList", ReplyAction="http://tempuri.org/IKommunWebservice/RelativeListResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Relative[]> RelativeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/GetRelative", ReplyAction="http://tempuri.org/IKommunWebservice/GetRelativeResponse")]
        CareCheck.DomainClasses.Relative GetRelative(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/GetRelative", ReplyAction="http://tempuri.org/IKommunWebservice/GetRelativeResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Relative> GetRelativeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateRelative", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateRelativeResponse")]
        void InsertOrUpdateRelative(CareCheck.DomainClasses.Relative relative);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateRelative", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateRelativeResponse")]
        System.Threading.Tasks.Task InsertOrUpdateRelativeAsync(CareCheck.DomainClasses.Relative relative);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteRelative", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteRelativeResponse")]
        void DeleteRelative(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteRelative", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteRelativeResponse")]
        System.Threading.Tasks.Task DeleteRelativeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/GetRelativesPatient", ReplyAction="http://tempuri.org/IKommunWebservice/GetRelativesPatientResponse")]
        CareCheck.DomainClasses.Relative GetRelativesPatient(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/GetRelativesPatient", ReplyAction="http://tempuri.org/IKommunWebservice/GetRelativesPatientResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Relative> GetRelativesPatientAsync(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/ConnectRelativeAndPatient", ReplyAction="http://tempuri.org/IKommunWebservice/ConnectRelativeAndPatientResponse")]
        void ConnectRelativeAndPatient(int patientId, int relativeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/ConnectRelativeAndPatient", ReplyAction="http://tempuri.org/IKommunWebservice/ConnectRelativeAndPatientResponse")]
        System.Threading.Tasks.Task ConnectRelativeAndPatientAsync(int patientId, int relativeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/TaskList", ReplyAction="http://tempuri.org/IKommunWebservice/TaskListResponse")]
        CareCheck.DomainClasses.Task[] TaskList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/TaskList", ReplyAction="http://tempuri.org/IKommunWebservice/TaskListResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Task[]> TaskListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/GetTask", ReplyAction="http://tempuri.org/IKommunWebservice/GetTaskResponse")]
        CareCheck.DomainClasses.Task GetTask(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/GetTask", ReplyAction="http://tempuri.org/IKommunWebservice/GetTaskResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Task> GetTaskAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateTask", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateTaskResponse")]
        void InsertOrUpdateTask(CareCheck.DomainClasses.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateTask", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateTaskResponse")]
        System.Threading.Tasks.Task InsertOrUpdateTaskAsync(CareCheck.DomainClasses.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteTask", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteTaskResponse")]
        void DeleteTask(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteTask", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteTaskResponse")]
        System.Threading.Tasks.Task DeleteTaskAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/ScheduleList", ReplyAction="http://tempuri.org/IKommunWebservice/ScheduleListResponse")]
        CareCheck.DomainClasses.Schedule[] ScheduleList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/ScheduleList", ReplyAction="http://tempuri.org/IKommunWebservice/ScheduleListResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule[]> ScheduleListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateSchedule", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateScheduleResponse")]
        CareCheck.DomainClasses.Schedule InsertOrUpdateSchedule(CareCheck.DomainClasses.Schedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertOrUpdateSchedule", ReplyAction="http://tempuri.org/IKommunWebservice/InsertOrUpdateScheduleResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> InsertOrUpdateScheduleAsync(CareCheck.DomainClasses.Schedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/Schedule", ReplyAction="http://tempuri.org/IKommunWebservice/ScheduleResponse")]
        CareCheck.DomainClasses.Schedule Schedule(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/Schedule", ReplyAction="http://tempuri.org/IKommunWebservice/ScheduleResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> ScheduleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteSchedule", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteScheduleResponse")]
        void DeleteSchedule(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/DeleteSchedule", ReplyAction="http://tempuri.org/IKommunWebservice/DeleteScheduleResponse")]
        System.Threading.Tasks.Task DeleteScheduleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientsSchedules", ReplyAction="http://tempuri.org/IKommunWebservice/PatientsSchedulesResponse")]
        CareCheck.DomainClasses.Schedule[] PatientsSchedules();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/PatientsSchedules", ReplyAction="http://tempuri.org/IKommunWebservice/PatientsSchedulesResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule[]> PatientsSchedulesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/SaveSchedule", ReplyAction="http://tempuri.org/IKommunWebservice/SaveScheduleResponse")]
        void SaveSchedule();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/SaveSchedule", ReplyAction="http://tempuri.org/IKommunWebservice/SaveScheduleResponse")]
        System.Threading.Tasks.Task SaveScheduleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertTodo", ReplyAction="http://tempuri.org/IKommunWebservice/InsertTodoResponse")]
        void InsertTodo(CareCheck.DomainClasses.TodoList todoItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/InsertTodo", ReplyAction="http://tempuri.org/IKommunWebservice/InsertTodoResponse")]
        System.Threading.Tasks.Task InsertTodoAsync(CareCheck.DomainClasses.TodoList todoItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/Todos", ReplyAction="http://tempuri.org/IKommunWebservice/TodosResponse")]
        CareCheck.DomainClasses.TodoList[] Todos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKommunWebservice/Todos", ReplyAction="http://tempuri.org/IKommunWebservice/TodosResponse")]
        System.Threading.Tasks.Task<CareCheck.DomainClasses.TodoList[]> TodosAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKommunWebserviceChannel : vardkollen.KommunWebservice.IKommunWebservice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KommunWebserviceClient : System.ServiceModel.ClientBase<vardkollen.KommunWebservice.IKommunWebservice>, vardkollen.KommunWebservice.IKommunWebservice {
        
        public KommunWebserviceClient() {
        }
        
        public KommunWebserviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KommunWebserviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KommunWebserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KommunWebserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CareCheck.DomainClasses.Employee[] EmployeeList() {
            return base.Channel.EmployeeList();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Employee[]> EmployeeListAsync() {
            return base.Channel.EmployeeListAsync();
        }
        
        public CareCheck.DomainClasses.Employee GetEmployee(int id) {
            return base.Channel.GetEmployee(id);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Employee> GetEmployeeAsync(int id) {
            return base.Channel.GetEmployeeAsync(id);
        }
        
        public void InsertOrUpdateEmployee(CareCheck.DomainClasses.Employee employee) {
            base.Channel.InsertOrUpdateEmployee(employee);
        }
        
        public System.Threading.Tasks.Task InsertOrUpdateEmployeeAsync(CareCheck.DomainClasses.Employee employee) {
            return base.Channel.InsertOrUpdateEmployeeAsync(employee);
        }
        
        public void DeletEmployee(int id) {
            base.Channel.DeletEmployee(id);
        }
        
        public System.Threading.Tasks.Task DeletEmployeeAsync(int id) {
            return base.Channel.DeletEmployeeAsync(id);
        }
        
        public CareCheck.DomainClasses.Patient[] PatientList() {
            return base.Channel.PatientList();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Patient[]> PatientListAsync() {
            return base.Channel.PatientListAsync();
        }
        
        public CareCheck.DomainClasses.Patient GetPatient(int id) {
            return base.Channel.GetPatient(id);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Patient> GetPatientAsync(int id) {
            return base.Channel.GetPatientAsync(id);
        }
        
        public void InsertOrUpdatePatient(CareCheck.DomainClasses.Patient patient) {
            base.Channel.InsertOrUpdatePatient(patient);
        }
        
        public System.Threading.Tasks.Task InsertOrUpdatePatientAsync(CareCheck.DomainClasses.Patient patient) {
            return base.Channel.InsertOrUpdatePatientAsync(patient);
        }
        
        public void DeletePatient(int id) {
            base.Channel.DeletePatient(id);
        }
        
        public System.Threading.Tasks.Task DeletePatientAsync(int id) {
            return base.Channel.DeletePatientAsync(id);
        }
        
        public CareCheck.DomainClasses.Schedule PatientScheduleById(int id) {
            return base.Channel.PatientScheduleById(id);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> PatientScheduleByIdAsync(int id) {
            return base.Channel.PatientScheduleByIdAsync(id);
        }
        
        public CareCheck.DomainClasses.Relative[] RelativeList() {
            return base.Channel.RelativeList();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Relative[]> RelativeListAsync() {
            return base.Channel.RelativeListAsync();
        }
        
        public CareCheck.DomainClasses.Relative GetRelative(int id) {
            return base.Channel.GetRelative(id);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Relative> GetRelativeAsync(int id) {
            return base.Channel.GetRelativeAsync(id);
        }
        
        public void InsertOrUpdateRelative(CareCheck.DomainClasses.Relative relative) {
            base.Channel.InsertOrUpdateRelative(relative);
        }
        
        public System.Threading.Tasks.Task InsertOrUpdateRelativeAsync(CareCheck.DomainClasses.Relative relative) {
            return base.Channel.InsertOrUpdateRelativeAsync(relative);
        }
        
        public void DeleteRelative(int id) {
            base.Channel.DeleteRelative(id);
        }
        
        public System.Threading.Tasks.Task DeleteRelativeAsync(int id) {
            return base.Channel.DeleteRelativeAsync(id);
        }
        
        public CareCheck.DomainClasses.Relative GetRelativesPatient(string number) {
            return base.Channel.GetRelativesPatient(number);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Relative> GetRelativesPatientAsync(string number) {
            return base.Channel.GetRelativesPatientAsync(number);
        }
        
        public void ConnectRelativeAndPatient(int patientId, int relativeId) {
            base.Channel.ConnectRelativeAndPatient(patientId, relativeId);
        }
        
        public System.Threading.Tasks.Task ConnectRelativeAndPatientAsync(int patientId, int relativeId) {
            return base.Channel.ConnectRelativeAndPatientAsync(patientId, relativeId);
        }
        
        public CareCheck.DomainClasses.Task[] TaskList() {
            return base.Channel.TaskList();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Task[]> TaskListAsync() {
            return base.Channel.TaskListAsync();
        }
        
        public CareCheck.DomainClasses.Task GetTask(int id) {
            return base.Channel.GetTask(id);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Task> GetTaskAsync(int id) {
            return base.Channel.GetTaskAsync(id);
        }
        
        public void InsertOrUpdateTask(CareCheck.DomainClasses.Task task) {
            base.Channel.InsertOrUpdateTask(task);
        }
        
        public System.Threading.Tasks.Task InsertOrUpdateTaskAsync(CareCheck.DomainClasses.Task task) {
            return base.Channel.InsertOrUpdateTaskAsync(task);
        }
        
        public void DeleteTask(int id) {
            base.Channel.DeleteTask(id);
        }
        
        public System.Threading.Tasks.Task DeleteTaskAsync(int id) {
            return base.Channel.DeleteTaskAsync(id);
        }
        
        public CareCheck.DomainClasses.Schedule[] ScheduleList() {
            return base.Channel.ScheduleList();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule[]> ScheduleListAsync() {
            return base.Channel.ScheduleListAsync();
        }
        
        public CareCheck.DomainClasses.Schedule InsertOrUpdateSchedule(CareCheck.DomainClasses.Schedule schedule) {
            return base.Channel.InsertOrUpdateSchedule(schedule);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> InsertOrUpdateScheduleAsync(CareCheck.DomainClasses.Schedule schedule) {
            return base.Channel.InsertOrUpdateScheduleAsync(schedule);
        }
        
        public CareCheck.DomainClasses.Schedule Schedule(int id) {
            return base.Channel.Schedule(id);
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule> ScheduleAsync(int id) {
            return base.Channel.ScheduleAsync(id);
        }
        
        public void DeleteSchedule(int id) {
            base.Channel.DeleteSchedule(id);
        }
        
        public System.Threading.Tasks.Task DeleteScheduleAsync(int id) {
            return base.Channel.DeleteScheduleAsync(id);
        }
        
        public CareCheck.DomainClasses.Schedule[] PatientsSchedules() {
            return base.Channel.PatientsSchedules();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.Schedule[]> PatientsSchedulesAsync() {
            return base.Channel.PatientsSchedulesAsync();
        }
        
        public void SaveSchedule() {
            base.Channel.SaveSchedule();
        }
        
        public System.Threading.Tasks.Task SaveScheduleAsync() {
            return base.Channel.SaveScheduleAsync();
        }
        
        public void InsertTodo(CareCheck.DomainClasses.TodoList todoItem) {
            base.Channel.InsertTodo(todoItem);
        }
        
        public System.Threading.Tasks.Task InsertTodoAsync(CareCheck.DomainClasses.TodoList todoItem) {
            return base.Channel.InsertTodoAsync(todoItem);
        }
        
        public CareCheck.DomainClasses.TodoList[] Todos() {
            return base.Channel.Todos();
        }
        
        public System.Threading.Tasks.Task<CareCheck.DomainClasses.TodoList[]> TodosAsync() {
            return base.Channel.TodosAsync();
        }
    }
}
